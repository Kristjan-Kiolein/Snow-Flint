package projecteuler.p010_p019.p012_highlyDivisibleTriangularNumber;

import java.util.HashSet;
import java.util.Set;

/**
 * <b>Highly divisible triangular number</b><br>
 * <br>
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:<br>
 *	<br>
 *	1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...<br>
 *	<br>
 *	Let us list the factors of the first seven triangle numbers:<br>
 *	<br>
 *	 1: 1<br>
 *	 3: 1,3<br>
 *	 6: 1,2,3,6<br>
 *	10: 1,2,5,10<br>
 *	15: 1,3,5,15<br>
 *	21: 1,3,7,21<br>
 *	28: 1,2,4,7,14,28<br>
 *	We can see that 28 is the first triangle number to have over five divisors.<br>
 *	<br>
 *	<i>What is the value of the first triangle number to have over five hundred divisors?</i><br>
 *
 */
public class HighlyDivisibleTriangularNumber {

	
	public static void main(String[] args) {
		System.out.println(solve());
	}
	
	
	
	private static int solve() {
		
		int targetDivisors = 501;
		int triangularNumber = 0;
		int n = 1;
		
		Set<Integer> divisors = new HashSet<>();
		Set<Integer> d1 = new HashSet<>();
		Set<Integer> d2 = new HashSet<>();
		
		while(divisors.size() < targetDivisors) {
			divisors.clear();
			d1.clear();
			d2.clear();
			triangularNumber += n;
			
			for(int i = 1; i <= n + 1; i++) {
				if(n%i == 0) d1.add(i);
				if((n + 1)%i == 0) d2.add(i);
			}
			
			for(Integer i : d1) {
				for (Integer j : d2) {
					if(triangularNumber%(i*j) == 0) divisors.add(i*j);
				}
			}
//			System.out.println(n + " amount : " + divisors.size() + " value : " + n*(n+1)/2 + "(" + triangularNumber + ") : " + divisors + d1 + d2);
			n++;
		}
		System.out.println(triangularNumber);
		return triangularNumber;
	}
}
